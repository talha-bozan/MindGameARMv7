/* Initialize the exception vector table
 ********************************************************************************/
.section    .vectors, "ax"              

        B       _start                      // reset vector
        B       SERVICE_UND                 // undefined instruction vector
        B       SERVICE_SVC                 // software interrrupt vector
        B       SERVICE_ABT_INST            // aborted prefetch vector
        B       SERVICE_ABT_DATA            // aborted data vector
.word       0                               // unused vector
        B       SERVICE_IRQ                 // IRQ interrupt vector
        B       SERVICE_FIQ                 // FIQ interrupt vector

/*********************************************************************************
 * This program demonstrates use of interrupts with assembly code. It first starts
 * timer the Altera interval timer (in the FPGA). The program responds to interrupts from this timer in addition to the pushbutton 
 * KEYs in the FPGA.
 *
 * The interrupt service routine for the interval timer displays a pattern on
 * the LED lights, and shifts this pattern either left or right. The shifting
 * direction is set in the pushbutton interrupt service routine; it is reversed
 * each time a KEY is pressed
 ********************************************************************************/
.text                                   
.global     _start                      
_start:                                     
/* Set up stack pointers for IRQ and SVC processor modes */
        MOV     R1, #0b11010010  //| IRQ_MODE 
        MSR     CPSR_c, R1                  // change to IRQ mode
        LDR     SP, =0xFFFFFFFF - 3      // set IRQ stack to top of A9 onchip
                                            // memory

/* Change to SVC (supervisor) mode with interrupts disabled */
        MOV     R1, #0b11010011  //| SVC_MODE 
        MSR     CPSR_c, R1                  // change to supervisor mode
        LDR     SP, =0x3FFFFFFF - 3            // set SVC stack to top of DDR3 memory

        BL      CONFIG_GIC                  // configure the ARM generic interrupt
                                            // controller
        BL      CONFIG_PRIVATE_TIMER       // configure the Altera interval timer
        BL      CONFIG_KEYS                 // configure the pushbutt	on KEYs

/* enable IRQ interrupts in the processor */
        MOV     R1, #0b01010011   //| SVC_MODE  // IRQ unmasked, MODE = SVC
        MSR     CPSR_c, R1                  
    	
MAINLOOP:
	LDR R0, =round // Load the address of the memory location "round" into R0
	LDR R12, [R0]
	CMP R12, #0 //if round 0 loop back
	BEQ MAINLOOP // if round 1 so level is selected, start the game
	BNE SHOW_DIGITS // this means round is 1.

GAMELOOP:
	LDR R0, =0xff200040 //switch 
	LDR R2, =current //Taking the hex value from 7-segment which is saved on "current" mem location.
	LDR R3, [R2]
	WAIT_INPUT: // wait the right input from switches.
		LDR R1, [R0]
		CMP R1, R3
		BEQ VALID_INPUT
		BNE WAIT_INPUT
	
VALID_INPUT: // if the input is right
	LDR R8, =0xff200000 //taking mem location from leds to check.
	LDR R9, [R8]
	LSL R9, R9, #1
	ORR R9, R9, #0b1
	STR R9, [R8]
	LDR R10, =0b1111111111
	CMP R9, R10 //if all leds are opened finish the game
	BEQ end
	BNE SHOW_DIGITS // if not show the next number
	
RESET: //hiding the numbers for remembering.
	BL LONG_DELAY // delay to hide value
	LDR R0, =0xFF200020
	MOV R1, #0x00 
	STR R1, [R0] //hiding the value from 7-segment
	B GAMELOOP
        
                      
/* Configure the Altera interval timer to create interrupts at 50-msec intervals */
CONFIG_PRIVATE_TIMER:   
        LDR     R0, =0xFFFEC600             
/* set the interval timer period for scrolling the LED displays */
        LDR     R1, =100000000                // 1/(200 MHz) x 10^8 = 500 msec
        STR     R1, [R0]
                                            // start the interval timer, enable its interrupts
        MOV     R1, #0b011                  // A = 1, E = 1
        STR     R1, [R0, #0x8]                  
        BX      LR                          

/* Configure the pushbutton KEYS to generate interrupts */
CONFIG_KEYS:                                
                                            // write to the pushbutton port interrupt mask register
			LDR     R0, =0xff200050             // pushbutton key base address
			MOV     R1, #0xF                    // set interrupt mask bits
			STR     R1, [R0, #0x8]              // interrupt mask register is (base + 8)
			BX      LR                          

/* This file:
 * 1. defines exception vectors for the A9 processor
 * 2. provides code that initializes the generic interrupt controller
 */

/*--- IRQ ---------------------------------------------------------------------*/
           
SERVICE_IRQ:                            
        PUSH    {R0-R12, LR}             

/* Read the ICCIAR from the CPU interface */
        LDR     R4, =0xFFFEC100   
        LDR     R5, [R4, #0x0C]       // read the interrupt ID          

KEYS_CHECK:                             
        CMP     R5, #73           	//Push button interruptimi kontrol et
		BNE UNEXPECTED				//Degilse unexpected interrupta git
		BL CHECK_ROUND					//Oyleyse KEY_ISR'a git
		B EXIT_IRQ					//Sonra interrupt cikisina git	
UNEXPECTED:                             
        BNE     UNEXPECTED              // if not recognized, stop here
              
EXIT_IRQ:                               
/* Write to the End of Interrupt Register (ICCEOIR) */
        STR     R5, [R4, #0x10]      

        POP     {R0-R12, LR}             
        SUBS    PC, LR, #4              


/*--- Undefined instructions --------------------------------------------------*/
.global     SERVICE_UND             
SERVICE_UND:                            
        B       SERVICE_UND             

/*--- Software interrupts -----------------------------------------------------*/
.global     SERVICE_SVC             
SERVICE_SVC:                            
        B       SERVICE_SVC             

/*--- Aborted data reads ------------------------------------------------------*/
.global     SERVICE_ABT_DATA        
SERVICE_ABT_DATA:                       
        B       SERVICE_ABT_DATA        

/*--- Aborted instruction fetch -----------------------------------------------*/
.global     SERVICE_ABT_INST        
SERVICE_ABT_INST:                       
        B       SERVICE_ABT_INST        

/*--- FIQ ---------------------------------------------------------------------*/
.global     SERVICE_FIQ             
SERVICE_FIQ:                            
        B       SERVICE_FIQ             

/*
 * Configure the Generic Interrupt Controller (GIC)
 */
.global     CONFIG_GIC              
CONFIG_GIC:                             
           
/* configure the FPGA IRQ0 (interval timer) and IRQ1 (KEYs) interrupts */
        LDR     R0, =0xFFFED848         // ICDIPTRn: processor targets register
        LDR     R1, =0x00000101         // set targets to cpu0
        STR     R1, [R0]                

        LDR     R0, =0xFFFED108         // ICDISERn: set enable register
        LDR     R1, =0x00000300         // set interrupt enable
        STR     R1, [R0]                

/* configure the GIC CPU interface */
        LDR     R0, =0xFFFEC100   // base address of CPU interface
/* Set Interrupt Priority Mask Register (ICCPMR) */
        LDR     R1, =0xFFFF             // 0xFFFF enables interrupts of all
                                        // priorities levels
        STR     R1, [R0, #0x04]       
/* Set the enable bit in the CPU Interface Control Register (ICCICR). This bit
 * allows interrupts to be forwarded to the CPU(s) */
        MOV     R1, #0x1             
        STR     R1, [R0, #0x00]       

/* Set the enable bit in the Distributor Control Register (ICDDCR). This bit
 * allows the distributor to forward interrupts to the CPU interface(s) */
        LDR     R0, =0xFFFED000    
        STR     R1, [R0, #0x00]       
        BX      LR                                             

KEY_ISR_LED:
	LDR R0, =0xff200050 // base address of pushbutton KEY port
	LDR R1, [R0, #0xC] // read edge capture register
	MOV R2, #0xF
	STR R2, [R0, #0xC] // clear the interrupt
	LDR R5, =level
CHECK_KEY0:
	MOV R3, #0x1
	ANDS R3, R3, R1 // check for KEY0
	BEQ CHECK_KEY1
	MOV R6, #0
	B END_LEVEL_SELECT
CHECK_KEY1:
	MOV R3, #0x2
	ANDS R3, R3, R1 // check for KEY1
	BEQ CHECK_KEY2
	MOV R6, #1
	B END_LEVEL_SELECT
CHECK_KEY2:
	MOV R3, #0x4
	ANDS R3, R3, R1 // check for KEY2
	BEQ IS_KEY3
	MOV R6, #2
	B END_LEVEL_SELECT
IS_KEY3:
	MOV R6, #3
	B END_LEVEL_SELECT
//all is key labels are check the which push button is pressed.
// So the player can select the level.

END_LEVEL_SELECT: //so level is selected. Make round one for main loop to escape the control.
	STR R6, [R5]
	LDR R0, =round
	LDR R12, [R0]
	ADD R12, R12, #1
	STR R12, [R0]
	B END_KEY_ISR


SHOW_DIGITS:
	LDR		R3, =HEXTABLE  //For seven segment.
		
	LDR 	R0, =0xFFFEC600 //private time for randomizing.
	LDR 	R1, [R0, #0x4] 
		
	LDR 	R0, =0xFFF0 		// Masking
	AND 	R1, R1, R0 			

	LDR		R0, =0xFF200020		//7-segement display mem location.
	LSR		R1, R1, #4			// first 15 digit.
	MOV 	R4, #0b111			// For masking first 3 digits
		
	LDR		R10, =level         //To show how many digits to show according to the chosen level
	LDR		R11, [R10]
		
	LDR		R6, =0x0
		
	LEVEL_0:
		AND 	R5, R1, R4			// Masking first 3 bits of random number.
		MOV		R7, R5				//storing the hex number for check
		LSR 	R1, R1, #3			// shifting the first three bits to use again
		LDRB	R2, [R3,R5]			// To shifting the numbers from the hex table with pre index 
		ADD		R6, R6, R2			// To show the random number of first digit
		CMP		R11, #0				//checking the level
		BGT		LEVEL_1
		BEQ		END_DISPLAY
		
	LEVEL_1:
		LSL		R6, R6, #8			//shifting operation for second number
		LSL		R7, R7, #4
		AND 	R5, R1, R4			// Masking first 3 bits of random number.
		ORR		R7, R5, R7			//orr for original number to add last digit
		LSR 	R1, R1, #3			// shifting the first three bits to use again
		LDRB	R2, [R3,R5]			// To shifting the numbers from the hex table with pre index 
		ADD		R6, R6, R2			// To show the random number of second digit
		CMP		R11, #1				//checking the level
		BGT		LEVEL_2
		BEQ		END_DISPLAY
		
	LEVEL_2:
		LSL		R6, R6, #8			//shifting operation for third number
		LSL		R7, R7, #4
		AND 	R5, R1, R4			// Masking first 3 bits of random number.
		ORR		R7, R5, R7			//orr for original number to add last digit
		LSR 	R1, R1, #3			// shifting the first three bits to use again
		LDRB	R2, [R3,R5]			// To shifting the numbers from the hex table with pre index 
		ADD		R6, R6, R2			// To show the random number of third digit 
		CMP		R11, #2				//checking the level
		BGT		LEVEL_3
		BEQ		END_DISPLAY
		
	LEVEL_3:
		LSL		R6, R6, #8			//shifting operation for last number
		LSL		R7, R7, #4
		AND 	R5, R1, R4			// Masking first 3 bits of random number.
		ORR		R7, R5, R7			//orr for original number to add last digit
		LSR 	R1, R1, #3			// shifting the first three bits to use again
		LDRB	R2, [R3,R5]			// To shifting the numbers from the hex table with pre index
		ADD		R6, R6, R2			// To show the random number of last digit 
		
	END_DISPLAY:  
		LDR		R5, =current
		STR		R7, [R5]			//writing the global to check.
		STR		R6, [R0]			// display the number
		B		RESET

END_KEY_ISR:
		POP {R0-R12, LR}
        BX      LR  //clearing edge register
		
CHECK_ROUND: //checking the level from round 
		PUSH    {R0-R12, LR}
		LDR R0, =round
		LDR R12, [R0]
		CMP R12, #0
		BEQ KEY_ISR_LED //still waiting the selecting level
		BNE ALREADY_SELECTED//if selected the level
		
ALREADY_SELECTED:
		LDR R0, =0xff200050 // base address of pushbutton KEY port
		LDR R1, [R0, #0xC] // read edge capture register
		MOV R2, #0xF
		STR R2, [R0, #0xC] // clear the interrupt
		B END_KEY_ISR

SHORT_DELAY: PUSH {R7} 
LDR R7, =900000 // delay counter
B SUB_LOOP
LONG_DELAY: PUSH {R7}
LDR R7, =2000000 //(200 000 000 / 2 000 000) = 10 ms
SUB_LOOP: SUBS R7, R7, #1
	BNE SUB_LOOP
	POP {R7}
	BX LR

end:
	B end
	
HEXTABLE: .byte 0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f


.data
.global round
round:    .word 0
.global level
level:	  .word 0
.global current
current:  .word 0
